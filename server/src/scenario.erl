-module(scenario).
-behavior(gen_server).
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
-export([start/0]).

start() ->
  gen_server:start_link(?MODULE, [], []).

init([]) ->
  Self = self(),
  MapData =
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,1,5,5,5,5,1,1,2,4,4,4,4,4,4,4,2,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,1,1,1,5,1,1,1,2,4,4,4,4,4,4,4,2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],
 [0,1,1,2,2,2,2,1,1,1,1,1,1,3,4,4,4,4,4,4,4,2,1,1,1,1,1,2,4,4,4,4,4,5,4,4,4,2,1,1,1,1,2,4,4,4,4,4,5,4,4,4,2,1,1,1,0],
 [0,1,1,2,4,4,3,1,1,1,1,1,1,2,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,4,4,4,4,4,3,1,1,1,1,3,4,4,4,4,4,5,4,4,4,2,1,1,1,0],
 [0,1,1,2,4,4,2,1,5,5,1,1,1,2,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,5,4,4,4,4,3,1,1,1,1,3,4,5,5,4,4,4,4,4,4,2,1,1,1,0],              
 [0,1,1,2,2,2,2,1,1,1,1,1,1,2,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,4,4,5,4,4,3,1,1,1,1,3,4,4,5,4,4,4,4,4,4,2,1,1,1,0],    
 [0,1,1,1,1,1,1,1,2,2,2,1,1,2,4,4,4,4,4,2,1,1,1,1,5,5,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,0],           
 [0,1,1,1,1,1,2,3,2,4,2,1,1,2,4,4,4,4,4,2,1,1,1,1,5,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],     
 [0,1,1,1,1,1,2,4,4,4,2,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],         
 [0,1,1,1,1,1,2,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],      
 [0,1,1,1,1,1,2,2,2,2,2,1,1,1,2,2,2,2,2,2,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,5,1,1,0],          
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,5,1,1,0],
 [0,1,1,2,2,3,2,2,2,2,2,5,1,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,4,5,4,4,4,5,4,5,3,1,1,1,1,3,4,4,5,4,4,5,4,4,4,2,5,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,2,5,5,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,5,5,5,4,4,5,4,4,3,1,1,1,1,3,4,4,4,4,5,4,4,4,4,2,5,5,1,0],
 [0,1,1,2,4,4,4,4,4,4,2,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,2,4,4,5,4,4,4,4,4,4,3,1,1,1,1,3,4,4,4,4,4,4,4,4,4,2,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,5,5,5,4,4,4,4,2,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,2,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,2,1,1,1,1,1,2,2,3,2,2,2,2,2,1,1,2,2,2,2,2,3,2,2,1,1,1,1,2,2,2,2,1,0],
 [0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1,1,2,1,0],
 [0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1,1,2,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,2,2,2,2,2,2,2,1,2,1,1,2,3,2,2,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,0],
 [0,1,1,2,1,2,1,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,1,1,1,1,1,1,2,2,2,1,2,2,2,3,2,1,2,2,3,2,1,1,1,2,2,2,0],
 [0,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,2,0],
 [0,1,1,2,1,1,1,5,2,1,1,1,1,1,1,5,5,5,1,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,2,0],
 [0,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,0],
 [0,1,1,2,2,2,2,2,1,1,2,1,1,2,1,5,5,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,1,2,2,2,2,1,1,2,1,1,2,0],
 [0,1,1,1,1,1,1,1,1,5,2,1,1,2,2,2,2,1,1,2,2,1,2,1,1,1,1,1,1,2,2,2,2,1,1,1,1,2,1,1,5,5,1,1,1,1,5,1,1,1,1,1,2,1,1,2,0],
 [0,1,1,2,5,1,1,1,1,5,2,1,1,1,1,5,5,1,1,1,1,1,2,1,1,1,1,1,1,3,1,1,1,1,1,1,1,2,1,1,1,5,1,1,1,1,5,1,5,5,1,1,2,2,2,2,0],
 [0,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,5,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,5,1,1,1,5,1,1,1,1,1,1,0],
 [0,1,1,2,2,2,2,5,2,1,1,2,2,2,1,1,5,5,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,5,5,5,1,1,1,1,2,5,1,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,5,5,1,5,1,1,1,2,5,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,5,5,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,5,1,1,2,1,1,2,5,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,2,3,2,2,1,2,2,3,2,2,1,1,2,2,3,2,2,5,5,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
 [0,1,2,2,3,2,2,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
 [0,1,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,0],
 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
  Map = digraph:new(),
  tile:initialize_map(Map, lists:reverse(MapData)),
  Characters = [],
  Vertices = digraph:vertices(Map),
  Zombies = lists:map(
    fun(_Num) ->
        Position = lists:nth(random:uniform(length(Vertices)), Vertices),
        {ok, Pid} = zombie:create([Self, Position, Map]),
        update_map(Map, Position, zombies, {add, Pid}),
        Pid
    end,
    lists:seq(1,30)),
  spawn(fun() -> tick:tick(Self, 200) end),
  {ok, {Characters, Zombies, Map}}.

%Tile functions... (maybe should go in separate module?)
% End of tile functions...

update_map(Map, Vertex, Attr, {Instruction, Value}) ->
  {Vertex, Tile} = digraph:vertex(Map, Vertex),
  case Attr of
    characters ->
      CharList = dict:fetch(characters, Tile),
      case Instruction of
        add ->
          NewList = lists:append(CharList, [Value]);
        rm ->
          NewList = lists:delete(Value, CharList)
      end,
      NewTile = dict:store(characters, NewList, Tile);
    zombies ->
      ZomList = dict:fetch(zombies, Tile),
      case Instruction of
        add ->
          NewList = lists:append(ZomList, [Value]);
        rm ->
          NewList = lists:delete(Value, ZomList)
      end,
      NewTile = dict:store(zombies, NewList, Tile);
    Attr ->
      io:format("No update function for: ~p~n",[Attr]),
      NewTile = Tile
  end,
  NewTile2 = tile:update_sym(NewTile),
  digraph:add_vertex(Map, Vertex, NewTile2).

handle_call(_Request, _From, State) ->
  Reply = ok,
  {reply, Reply, State}.

handle_cast(tick, {Characters, Zombies, _} = State) ->
  lists:foreach(fun(Character) -> gen_server:cast(Character, tick) end, Characters),
  lists:foreach(fun(Zombie) -> gen_server:cast(Zombie, tick) end, Zombies),
  {noreply, State};

handle_cast({wait, Pid}, State) ->
  gen_server:cast(Pid, unlock),
  {noreply, State};

handle_cast({walk, {Character, Direction}}, {C, Z, Map}) ->
  Pid = dict:fetch(id, Character),
  case Direction of
    "" ->
      gen_server:cast(Pid, unlock);
    Direction ->
      Location = dict:fetch(location, Character),
      Edge = tile:dir_to_key(Location, Direction),
      Result = digraph:edge(Map, Edge),
      {_, _, DesiredLocation, _} = Result,
      {DesiredLocation, TileData} = digraph:vertex(Map, DesiredLocation),
      case dict:fetch(movement, TileData) of
        false ->
          gen_server:cast(Pid, unlock);
        true ->
          case dict:fetch(zombified, Character) of
            true ->
              ListName = zombies;
            false ->
              ListName = characters
          end,
          NewLocation = DesiredLocation,
          update_map(Map, NewLocation, ListName, {add, Pid}),
          update_map(Map, Location, ListName, {rm, Pid}),
          gen_server:cast(Pid, {update_character, {location, NewLocation}}),
          case dict:fetch(zombified, Character) of
            true ->
              gen_server:cast(Pid, {heat_up, 10});
            false ->
              gen_server:cast(Pid, {heat_up, 8})
          end,
          gen_server:cast(Pid, unlock)
      end
  end,
  {noreply, {C, Z, Map}};

handle_cast({say, {Character, Msg}}, {Characters, _Z, _} = State) ->
  Name = dict:fetch(tag, Character),
  Output = lists:concat([Name, ": ", Msg]),
  lists:foreach(fun(Char) -> gen_server:cast(Char, {hear, Output}) end, Characters),
  {noreply, State};

handle_cast({add_character, Character}, {Characters, Z, Map}) ->
  Vertices = digraph:vertices(Map),
  Location = lists:nth(random:uniform(length(Vertices)), Vertices),
  update_map(Map, Location, characters, {add, Character}),
  gen_server:cast(Character, {add_to_char, {map, Map}}),
  gen_server:cast(Character, {add_to_char, {location, Location}}),
  NewList = lists:append(Characters,[Character]),
  {noreply, {NewList, Z, Map}};

handle_cast(Msg, State) ->
  io:format("Scenario received unkown cast: ~p~n",[Msg]),
  {noreply, State}.

handle_info(_Info, State) ->
  {noreply, State}.

terminate(_Reason, _State) ->
  ok.

code_change(_OldVsn, State, _Extra) ->
  {ok, State}.
