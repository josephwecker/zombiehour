-module(tile).
-export([initialize_map/1, coords_to_key/2, dir_to_key/2, open/1, close/1,
    repair_tile/2, damage_tile/2, update_tile/1]).
-record(structure, {
    state  = closed,
    maxhp  = 10,
    hp     = 10,
    maxrhp = 10,
    rhp    = 0
  }).

initialize_map(Map) ->
  MapData = map_data2(),
  SpawnPoints = lists:flatmap(
    fun(RowCount) ->
      lists:map(
        fun(ColCount) ->
            initialize_tile(Map, MapData, RowCount, ColCount)
        end,
        lists:seq(1,length(lists:nth(RowCount, MapData))))
    end,
    lists:seq(1,length(MapData))),
  %lists:foreach(
  %  fun(Tile) ->
  %      initialize_neighbors( Tile, Map, length(lists:nth(1,MapData)), length(MapData) )
  %  end,
  %  digraph:vertices(Map)),
  {ZSpawn, CSpawn} = lists:unzip(SpawnPoints),
  Zs = lists:map(
    fun(Z) -> atom_to_list(Z) end,
    lists:flatten(ZSpawn)),
  Cs = lists:map(
    fun(C) -> atom_to_list(C) end,
    lists:flatten(CSpawn)),
  {Zs, Cs}.

initialize_tile(Map, MapData, RowCount, ColCount) ->
  X = ColCount,
  Y = RowCount,
  Key = coords_to_key( X, Y ),
  Value = lists:nth(X, lists:nth(Y, MapData)),
  Attrs = [{x, X}, {y, Y}, {character, nil}],
  case Value of
    0 ->
      Attrs2 = [{type, map_boundary}, {structure, nil}];
    2 ->
      Attrs2 = [{type, wall}, {structure, nil}];
    3 ->
      Attrs2 = [{type, door}, {structure, #structure{}}];
    5 ->
      Attrs2 = [{type, obstacle}, {structure, nil}];
    6 ->
      Attrs2 = [{type, window}, {structure, #structure{maxhp=1,hp=1,maxrhp=4}}];
    _ ->
      Attrs2 = [{type, space}, {structure, nil}]
  end,
  case Value of
    h ->
      HSpawn = list_to_atom(Key),
      ZSpawn = [];
    z ->
      HSpawn = [],
      ZSpawn = list_to_atom(Key);
    _ ->
      HSpawn = [],
      ZSpawn = []
  end,
  Tile = dict:from_list(lists:append(Attrs, Attrs2)),
  Tile2 = update_tile(Tile),
  %vertex = {"x000y000", Tile}
  digraph:add_vertex(Map, Key, Tile2),
  {ZSpawn, HSpawn}.

%initialize_neighbors( Tile, Map, XBound, YBound ) ->
%  {Tile, TileData} = digraph:vertex(Map, Tile),
%  X = dict:fetch(x, TileData),
%  Y = dict:fetch(y, TileData),
%  {X1, X, X2} = find_bound(X, XBound),
%  {Y1, Y, Y2} = find_bound(Y, YBound),
%  List = [
%    {"northwest", coords_to_key( X1, Y2 )},
%    {"north"    , coords_to_key( X , Y2 )},
%    {"northeast", coords_to_key( X2, Y2 )},
%    {     "east", coords_to_key( X2, Y  )},
%    {"southeast", coords_to_key( X2, Y1 )},
%    {"south"    , coords_to_key( X , Y1 )},
%    {"southwest", coords_to_key( X1, Y1 )},
%    {     "west", coords_to_key( X1, Y  )}],
%  lists:foreach(
%    fun(ListItem) ->
%        {Direction, NTile} = ListItem,
%        Key = dir_to_key(Tile, Direction),
%        %edge   = {"x000y000direction", []}
%        digraph:add_edge(Map, Key, Tile, NTile, [])
%    end,
%    List).

coords_to_key(XInt,YInt) ->
  X = integer_to_list(XInt),
  Y = integer_to_list(YInt),
  lists:concat(["X", X, "Y", Y ]).

dir_to_key(Tile, Dir) ->
  lists:concat([Tile, Dir]).

%find_bound(D, Limit) ->
%  case D of
%    1 ->
%      D1 = D,
%      D2 = D + 1;
%    Limit ->
%      D1 = D - 1,
%      D2 = D;
%    D ->
%      D1 = D - 1,
%      D2 = D + 1
%  end,
%  {D1, D, D2}.

open(Tile) ->
  Structure = dict:fetch(structure, Tile),
  NewStructure = Structure#structure{state=opened},
  update_tile(dict:store(structure, NewStructure, Tile)).

close(Tile) ->
  Structure = dict:fetch(structure, Tile),
  NewStructure = Structure#structure{state=closed},
  update_tile(dict:store(structure, NewStructure, Tile)).

repair_tile(Tile, Amount) ->
  Structure = dict:fetch(structure, Tile),
  #structure{maxrhp=MaxRHP,rhp=RHP} = Structure,
  case RHP + Amount =< MaxRHP of
    true ->
      NewRHP = RHP + Amount;
    false ->
      NewRHP = MaxRHP
  end,
  NewStructure = Structure#structure{rhp= NewRHP},
  update_tile(dict:store(structure, NewStructure, Tile)).


damage_tile(Tile, Damage) ->
  Structure = dict:fetch(structure, Tile),
  #structure{hp=HP, rhp=RHP} = Structure,
  case RHP >= 1 of
    true ->
      case Damage =< RHP of
        true ->
          Structure1 = Structure#structure{rhp= RHP - Damage},
          LeftOverDamage = 0;
        false ->
          Structure1 = Structure#structure{rhp= 0},
          LeftOverDamage = Damage - RHP
      end;
    false ->
      Structure1 = Structure,
      LeftOverDamage = Damage
  end,
  NewStructure = Structure1#structure{hp= HP - LeftOverDamage},
  update_tile(dict:store(structure, NewStructure, Tile)).

update_tile(Tile) ->
  case dict:fetch(character, Tile) of
    nil ->
      case dict:fetch(type, Tile) of
        map_boundary ->
          Visible = false,
          Movement = false,
          Symbol = "2";
        space ->
          Visible = true,
          Movement = 1,
          Symbol = "1";
        wall ->
          Visible = false,
          Movement = false,
          Symbol = "2";
        door ->
          #structure{state=State, hp=HP, rhp=RHP} = dict:fetch(structure, Tile),
          case RHP >= 1 of
            true ->
              Visible = false,
              Movement = false,
              Symbol = "4";
            false ->
              case HP >= 1 of
                false ->
                  Visible = true,
                  Movement = 1,
                  Symbol = "6";
                true ->
                case State of
                  closed ->
                    Visible = false,
                    Movement = false,
                    Symbol = "3";
                  opened ->
                    Visible = true,
                    Movement = 1,
                    Symbol = "5"
                end
            end
          end;
        window ->
          #structure{state=State, hp=HP, rhp= RHP} = dict:fetch(structure, Tile),
          case RHP >= 1 of
            true ->
              Visible = true,
              Movement = false,
              Symbol = "8";
            false ->
              case HP >= 1 of
                false ->
                  Visible = true,
                  Movement = 20,
                  Symbol = "10";
                true ->
                  case State of
                    closed ->
                      Visible = true,
                      Movement = false,
                      Symbol = "7";
                    opened ->
                      Visible = true,
                      Movement = false,
                      Symbol = "9"
                  end
              end
          end;
        obstacle ->
          Visible = true,
          Movement = 12,
          Symbol = "11"
      end;
    Character ->
      case dict:fetch(zombified, Character) of
        true ->
          Visible = true,
          Movement = false,
          Symbol = "12";
        false ->
          Visible = true,
          Movement = false,
          Symbol = "13"
      end
  end,
  Tile1 = dict:store(symbol, Symbol, Tile),
  Tile2 = dict:store(visible, Visible, Tile1),
  dict:store(movement, Movement, Tile2).

map_data2() ->
  lists:reverse([
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,1,z,z,z,1,1,1,1,1,1,1,1,1,z,z,z,1,1,1,1,1,1,1,1,1,1,z,z,z,1,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,2,2,6,6,2,2,2,2,6,6,6,2,3,2,2,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,2,1,1,1,1,2,1,1,5,5,5,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,6,1,h,h,1,2,5,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,6,1,h,1,1,2,5,1,1,1,h,h,h,1,6,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,2,1,1,1,1,3,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,2,2,2,2,2,2,1,1,5,5,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0],
[0,1,1,1,1,1,2,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,3,1,1,1,2,1,1,1,1,0],
[0,1,1,1,1,1,6,1,h,1,1,2,1,h,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,0],
[0,z,1,1,1,1,6,1,h,1,1,2,1,h,1,1,5,5,1,1,2,1,2,2,2,2,2,1,1,1,z,0],
[0,z,1,1,1,1,2,1,1,1,1,2,1,1,1,1,5,5,1,1,2,1,2,1,1,1,2,1,1,1,z,0],
[0,z,1,1,1,1,2,1,1,1,1,2,1,1,1,1,5,5,1,1,2,1,3,1,h,1,6,1,1,1,z,0],
[0,1,1,1,1,1,2,2,6,2,2,2,2,2,1,1,5,5,1,1,2,1,2,1,h,1,6,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,2,1,1,1,2,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,6,6,6,2,2,1,2,2,2,2,2,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,6,1,h,5,5,5,5,2,1,3,1,1,1,2,1,1,1,1,0],
[0,1,1,2,2,2,2,2,2,2,1,1,1,2,1,h,1,1,1,5,2,1,2,1,h,1,6,1,1,1,1,0],
[0,1,1,2,1,1,3,1,1,3,1,1,1,3,1,1,h,h,1,5,2,1,2,1,h,1,6,1,1,1,1,0],
[0,1,1,6,1,1,2,1,1,2,1,1,1,2,5,5,5,1,1,1,3,1,2,1,1,1,2,1,1,1,1,0],
[0,1,1,6,1,1,2,1,1,6,1,1,1,2,2,6,6,2,2,2,2,2,2,2,6,2,2,1,1,1,1,0],
[0,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,z,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,z,0],
[0,1,z,z,z,1,1,1,1,1,1,1,1,1,z,z,z,1,1,1,1,1,1,1,1,1,1,z,z,z,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]).

map_data() ->
  lists:reverse([
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,1,5,5,5,5,1,1,2,4,4,4,4,4,4,4,2,1,1,1,1,1,5,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,5,1,1,1,2,4,4,4,4,4,4,4,2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],
[0,1,1,2,2,2,2,1,1,1,1,1,1,3,4,4,4,4,4,4,4,2,1,1,1,1,1,2,4,4,4,4,4,5,4,4,4,2,1,1,1,1,2,4,4,4,4,4,5,4,4,4,2,1,1,1,0],
[0,1,1,2,4,4,3,1,1,1,1,1,1,2,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,4,4,4,4,4,3,1,1,1,1,3,4,4,4,4,4,5,4,4,4,2,1,1,1,0],
[0,1,1,2,4,4,2,1,5,5,1,1,1,2,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,5,4,4,4,4,3,1,1,1,1,3,4,5,5,4,4,4,4,4,4,2,1,1,1,0],              
[0,1,1,2,2,2,2,1,1,1,1,1,1,6,4,4,4,4,4,2,1,1,1,5,5,1,1,2,4,4,4,4,4,4,5,4,4,3,1,1,1,1,3,4,4,5,4,4,4,4,4,4,2,1,1,1,0],    
[0,1,1,1,1,1,1,1,2,2,2,1,1,2,4,4,4,4,4,2,1,1,1,1,5,5,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,0],           
[0,1,1,1,1,1,2,3,2,4,2,1,1,2,4,4,4,4,4,2,1,1,1,1,5,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],     
[0,1,1,1,1,1,2,4,4,4,2,1,1,2,6,2,6,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],         
[0,1,1,1,1,1,2,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],      
[0,1,1,1,1,1,2,2,2,2,2,1,1,1,2,2,2,2,2,2,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,5,1,1,0],          
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,5,1,1,0],
[0,1,1,2,2,3,2,2,2,2,2,5,1,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,4,5,4,4,4,5,4,5,3,1,1,1,1,3,4,4,5,4,4,5,4,4,4,2,5,1,1,0],
[0,1,1,2,4,4,4,4,4,4,2,5,5,1,2,4,4,4,4,4,4,4,4,2,1,1,1,2,4,5,5,5,4,4,5,4,4,3,1,1,1,1,3,4,4,4,4,5,4,4,4,4,2,5,5,1,0],
[0,1,1,2,4,4,4,4,4,4,2,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,2,4,4,5,4,4,4,4,4,4,3,1,1,1,1,3,4,4,4,4,4,4,4,4,4,2,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,4,2,1,1,1,1,2,4,4,5,5,5,4,4,4,4,2,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,2,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,2,1,1,1,1,1,2,2,3,2,2,2,2,2,1,1,2,2,2,2,2,3,2,2,1,1,1,1,2,2,2,2,1,0],
[0,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1,1,2,1,0],
[0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1,1,2,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,2,2,2,2,2,2,2,2,1,2,1,1,2,3,2,2,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,0],
[0,1,1,2,1,2,1,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,1,1,1,1,1,1,2,2,2,1,2,2,2,3,2,1,2,2,3,2,1,1,1,2,2,2,0],
[0,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,2,0],
[0,1,1,2,1,1,1,5,2,1,1,1,1,1,1,5,5,5,1,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,2,1,1,1,2,1,2,1,1,2,1,1,1,2,1,2,0],
[0,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,0],
[0,1,1,2,2,2,2,2,1,1,2,1,1,2,1,5,5,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,1,2,2,2,2,1,1,2,1,1,2,0],
[0,1,1,1,1,1,1,1,1,5,2,1,1,2,2,2,2,1,1,2,2,1,2,1,1,1,1,1,1,2,2,2,2,1,1,1,1,2,1,1,5,5,1,1,1,1,5,1,1,1,1,1,2,1,1,2,0],
[0,1,1,2,5,1,1,1,1,5,2,1,1,1,1,5,5,1,1,1,1,1,2,1,1,1,1,1,1,3,1,1,1,1,1,1,1,2,1,1,1,5,1,1,1,1,5,1,5,5,1,1,2,2,2,2,0],
[0,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,5,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,5,1,1,1,5,1,1,1,1,1,1,0],
[0,1,1,2,2,2,2,5,2,1,1,2,2,2,1,1,5,5,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,5,5,5,1,1,1,1,2,5,1,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,5,5,1,5,1,1,1,2,5,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,5,5,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,5,1,1,2,1,1,2,5,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,2,3,2,2,1,2,2,3,2,2,1,1,2,2,3,2,2,5,5,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
[0,1,2,2,3,2,2,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,1,2,2,3,2,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,0],
[0,1,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2,2,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]).
